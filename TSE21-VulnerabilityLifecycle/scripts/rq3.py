import pandas as pd
import matplotlib.pyplot as plt
from lifelines import KaplanMeierFitter


input_file_path = "../data/rq3_input.csv"
top_10_cwe = "../data/top10cwe.csv"


def summary_and_box(df_merged_top_10, column_name, name, filename):
    top_10_cwe_groups = df_merged_top_10.groupby("cwe", sort=False)
    print("Summary of Top-10 CWE {}".format(column_name))
    cwes_summary = top_10_cwe_groups[column_name].describe()
    print(round(cwes_summary, 2))
    print()

    # Keep the grouping order!
    ordering = enumerate(df_merged_top_10["cwe"].unique())
    positions = [ind for val, ind in sorted((v, i) for (i, v) in ordering)]

    # Boxplots of CVEs divided per top-10 CWEs
    boxes = df_merged_top_10.boxplot(column=column_name, by="cwe", rot=45, grid=False, positions=positions)#, layout=(1,2))
    boxes.set_yscale("log")
    boxes.set_xlabel("")
    boxes.set_ylabel("Number of {}".format(name))
    boxes.set_title("")
    plt.suptitle("")
    plt.savefig(filename, bbox_inches="tight")


def survival_plot(model, name, filename):
    model_median = model.median_survival_time_
    print("{} model median: {}".format(name, model_median))
    model_fig, model_axes = plt.subplots(nrows=1, ncols=1)
    model.plot(ci_show=False, ax=model_axes, ylabel= "Survival Probability", xlabel="Number of {}".format(name), linewidth=0.8, color="blue")
    model_axes.vlines(model_median, 0, 0.5, linestyle="dashed", colors=["gray"], linewidth=0.8)
    model_axes.hlines(0.5, 0, model_median, linestyle="dashed", colors=["gray"], linewidth=0.8)
    model_axes.scatter(model_median, 0.5, s=10, color="red")
    model_axes.set_xlim(0, None)
    model_axes.set_ylim(0, None)
    model_axes.legend().remove()
    model_fig.savefig(filename, bbox_inches="tight")

df_merged = pd.read_csv(input_file_path, delimiter=",")

# Simple profiling
print("CVEs: {}".format(len(df_merged)))
print()

# Descriptive Statistics of CVEs
df_merged_summary = df_merged[["days_before_last_fix", "commits_before_last_fix"]].describe()
print("Summary of CVE Days/Commits Before Last Fix")
print(round(df_merged_summary, 2))
print()

# Outliers
max_days = df_merged.loc[df_merged["days_before_last_fix"].idxmax()]
max_commits = df_merged.loc[df_merged["commits_before_last_fix"].idxmax()]
print("{} has the highest number of days_before_last_fix ({}) and required {} commits".format(max_days.cve, max_days.days_before_last_fix, max_days.commits_before_last_fix))
print("{} has the highest number of commits_before_last_fix ({}) and required {} days".format(max_commits.cve, max_commits.commits_before_last_fix, max_commits.days_before_last_fix))
print()

# Group by CWE
top_10_cwe = pd.read_csv(top_10_cwe)["cwe"].to_list()
df_merged_top_10 = pd.DataFrame()
for cwe in top_10_cwe:
    df_merged_top_10 = df_merged_top_10.append(df_merged[df_merged["cwe"] == cwe])

# Descriptive Statistics and Boxplots of CVEs divided per Top-10 CWEs
summary_and_box(df_merged_top_10, "days_before_last_fix", "Days", "../plots/days_boxes.pdf")
summary_and_box(df_merged_top_10, "commits_before_last_fix", "Commits", "../plots/commits_boxes.pdf")

# Survival Analysis
days_model = KaplanMeierFitter().fit(df_merged["days_before_last_fix"])
survival_plot(days_model, "Days", "../plots/days_model.pdf")
commits_model = KaplanMeierFitter().fit(df_merged["commits_before_last_fix"])
survival_plot(commits_model, "Commits", "../plots/commits_model.pdf")

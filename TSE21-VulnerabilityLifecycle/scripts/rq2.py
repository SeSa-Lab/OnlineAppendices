import pandas as pd


input_file_path = "../data/rq2_input.csv"
top_10_cwe = "../data/top10cwe.csv"
goal_columns = ["new_feature", "bug_fixing", "enhancement", "refactoring"]
distance_columns = ["distance_from_release", "distance_from_creation"]

def commit_goals(df):
    total = len(df)
    no_goals_count = (df[goal_columns].sum(axis=1) == 0).sum()
    new_feature_count = df[goal_columns[0]].sum()
    bug_fixing_count = df[goal_columns[1]].sum()
    enhancement_count = df[goal_columns[2]].sum()
    refactoring_count = df[goal_columns[3]].sum()
    no_goals_perc = no_goals_count / total * 100
    new_feature_perc = new_feature_count / total * 100
    bug_fixing_perc = bug_fixing_count / total * 100
    enhancement_perc = enhancement_count / total * 100
    refactoring_perc = refactoring_count / total * 100
    print("Inducing Commits w/o any goal: {} ({}%)".format(no_goals_count, round(no_goals_perc, 2)))
    print("Inducing Commits w/ goals:")
    print("- New Feature: {} ({}%)".format(bug_fixing_count, round(bug_fixing_perc, 2)))
    print("- Bug Fix: {} ({}%)".format(new_feature_count, round(new_feature_perc, 2)))
    print("- Enhancement: {} ({}%)".format(enhancement_count, round(enhancement_perc, 2)))
    print("- Refactoring: {} ({}%)".format(refactoring_count, round(refactoring_perc, 2)))
    print()

df_inducings = pd.read_csv(input_file_path, delimiter=",")

# Simple Profiling
num_repos = df_inducings["repo"].nunique()
num_inducings = len(df_inducings)
num_cves = df_inducings.groupby("cve").size().count()
print("Repos: {}".format(num_repos))
print("Inducing Commits: {}".format(num_inducings))
print("CVEs: {}".format(num_cves))
print()

# Commit goals analysis

## Frequency distribution per inducing commit
print("Commit goals of All Inducing Commits")
commit_goals(df_inducings)

# Frequency distribution on the top-10 CWE
top_10_cwe = pd.read_csv(top_10_cwe)["cwe"].to_list()
df_top_10 = pd.DataFrame()
for cwe in top_10_cwe:
    df_cwe = df_inducings[df_inducings["cwe"] == cwe]
    df_top_10 = df_top_10.append(df_cwe)
top_10_cwe_groups = df_top_10.groupby("cwe", sort=False)
print("Commit goals of Top-10 CWE")
for name, group_df in top_10_cwe_groups:
    print()
    print(name)
    commit_goals(group_df)

# Project status analysis

## Counts of inducing commit working on release categories
same_day_count = (df_inducings[distance_columns[0]] == 0).sum()
day_before_count = (df_inducings[distance_columns[0]] == 1).sum()
within_week_count = ((df_inducings[distance_columns[0]] > 1) & (df_inducings[distance_columns[0]] <= 7)).sum()
within_month_count = ((df_inducings[distance_columns[0]] > 7) & (df_inducings[distance_columns[0]] <= 28)).sum()
over_month_count = (df_inducings[distance_columns[0]] > 28).sum()
same_day_perc = same_day_count / num_inducings * 100
day_before_perc = day_before_count / num_inducings * 100
within_week_perc = within_week_count / num_inducings * 100
within_month_perc = within_month_count / num_inducings * 100
over_month_perc = over_month_count / num_inducings * 100
print("Inducing Commits made:")
print("- the same day: {} ({}%)".format(same_day_count, round(same_day_perc, 2)))
print("- the day before: {} ({}%)".format(day_before_count, round(day_before_perc, 2)))
print("- within the week: {} ({}%)".format(within_week_count, round(within_week_perc, 2)))
print("- within the month: {} ({}%)".format(within_month_count, round(within_month_perc, 2)))
print("- over one month before: {} ({}%)".format(over_month_count, round(over_month_perc, 2)))
print("of a release")
print()

## Counts of inducing commit project startup categories
same_week_count = (df_inducings[distance_columns[1]] <= 7).sum()
week_after_count = ((df_inducings[distance_columns[1]] > 7) & (df_inducings[distance_columns[1]] <= 28)).sum()
month_after_count = ((df_inducings[distance_columns[1]] > 28) & (df_inducings[distance_columns[1]] <= 365)).sum()
over_year_count = (df_inducings[distance_columns[1]] > 365).sum()
same_week_perc = same_week_count / num_inducings * 100
week_after_perc = week_after_count / num_inducings * 100
month_after_perc = month_after_count / num_inducings * 100
over_year_perc =  over_year_count / num_inducings * 100
print("Inducing Commits made:")
print("- the same week of: {} ({}%)".format(same_week_count, round(same_week_perc, 2)))
print("- the week after: {} ({}%)".format(week_after_count, round(week_after_perc, 2)))
print("- the month after: {} ({}%)".format(month_after_count, round(month_after_perc, 2)))
print("- over one year after: {} ({}%)".format(over_year_count, round(over_year_perc, 2)))
print("the project creation")
print()

# Developers status analysis

## Frequency distribution of inducing commit author workloads
inducings_low_workload_perc = (df_inducings["author_workload"] < 0.25).sum() / num_inducings * 100
inducings_medium_workload_perc = ((df_inducings["author_workload"] >= 0.25) & (df_inducings["author_workload"] < 0.75)).sum() / num_inducings * 100
inducings_high_workload_perc = (df_inducings["author_workload"] >= 0.75).sum() / num_inducings * 100
print("Percentages of Low / Medium / High Inducing Commit Author Workloads: {}% / {}% / {}%".format(
    round(inducings_low_workload_perc, 2),
    round(inducings_medium_workload_perc, 2),
    round(inducings_high_workload_perc, 2)
))

## Frequency distribution of inducing commit author tenure
inducings_low_tenure_perc = (df_inducings["author_tenure"] < 0.25).sum() / num_inducings * 100
inducings_medium_tenure_perc = ((df_inducings["author_tenure"] >= 0.25) & (df_inducings["author_tenure"] < 0.75)).sum() / num_inducings * 100
inducings_high_tenure_perc = (df_inducings["author_tenure"] >= 0.75).sum() / num_inducings * 100
print("Percentages of Low / Medium / High Inducing Commit Author Tenures: {}% / {}% / {}%".format(
    round(inducings_low_tenure_perc, 3),
    round(inducings_medium_tenure_perc, 3),
    round(inducings_high_tenure_perc, 3)
))
print()

# Group by CVE
cve_groups = df_inducings.groupby("cve", sort=False)
cves_number_inducings = cve_groups.size()
cves_number_inducings.name = "inducing_count"
cves_goals = cve_groups[goal_columns].sum()
cves_min_distances = cve_groups[distance_columns].min()
df_cves = pd.concat([cves_number_inducings, cves_goals, cves_min_distances], axis=1)
num_cves = len(df_cves)
print("CVEs (after removal): {}".format(num_cves))

## CVEs whose at least one inducing commit was done one day before or the same day of a release
cves_near_release_count = (df_cves["distance_from_release"] <= 1).sum()
print("CVEs w/ at least one Inducing Commit made One Day before or the Same Day of a Release: {}/{} ({}%)".format(cves_near_release_count, num_cves, round(cves_near_release_count / num_cves * 100, 2)))

## CVEs with no goals
cves_no_goals_count = (df_cves[goal_columns].sum(axis=1) == 0).sum()
print("CVEs w/o any commit goal: {} / {} ({}%)".format(cves_no_goals_count, num_cves, round(cves_no_goals_count / num_cves * 100, 2)))

## CVEs with all goals
cves_all_goals_count = (df_cves[goal_columns].product(axis=1) > 0).sum()
print("CVEs w/ all commit goals: {} / {} ({}%)".format(cves_all_goals_count, num_cves, round(cves_all_goals_count / num_cves * 100, 2)))

## Number of Goals per CVE
cves_distinct_goals_count = (df_cves[goal_columns] > 0).sum(axis=1)
print("Summary of number of distinct goals per CVE")
print(round(cves_distinct_goals_count.describe(), 2))
